#1. immutable과 mutable의 차이를 말하기 앞서 변수란 무엇인가?
1. '변수'는 데이터를 메모리에 저장할 때 물리적인 메모리 주소 대신
기억하기 쉬운 단어로 구성된 꼬리표. ※ 물리적인 메모리 주소는 항상 바뀔 수 있다.

#2. immutable(변할 수 없는)
1. 무엇이 변할 수 없는걸까?
1-1) 그 답은 메모리 주소다.
ex) 문자열 값 덧붙이기
abcde_str = 'abcd'
id(abcde_str) ---> 4522087288 (메모리주소)
print(abcde_str+'e') -> 'abcde'
print(abcde_str) -> 'abcd' (값의 변화가 없고)
id(abcde_str) ---> 4522087288 (메모리 주소가 변경되지 않았다)

abcde_str = abcde_str + 'e'
print(abcde_str) ---> 'abcde'
id(abcde_str) ---> 4574089144 ( 메모리 주소가 변경됐다 -> 객체 변경 )

#3. mutable(변할 수 있는)
1. ex) abcde_list = ['a','b','c','d']
id(abcde_list) ---> 4574096456
abcde_list.append('e')
print(abcde_list) ---> ['a','b','c','d','e'] (값은 변경됐지만)
id(abcde_list) ---> 4574096456 ( 메모리 주소가 변경되지 않았다. )

#4. immutable과 mutable의 차이를 아는 개념이 왜 중요한가?
1. 만약 값을 자주 바꿔야하는 데이터가 있다고 가정해 보자.
변할 수 없는 데이터 타입의 값을 빈번하게 바꾸면 객체가 계속 생설될 것이고,
이는 프로그램이 사용하는 메모리를 과하게 사용하는 원인이 되기도 한다.
실제로 실무현장에서 이 문제로 장애가 발생하는 경우도 많다. 이럴 때 변할 수 있는
데이터 타입을 사용하면 객체를 새로 생성하지 않아도 되며, 메모리 누수를 방지하면서
메모리 사용 효율을 올릴 수 있다.