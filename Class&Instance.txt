#1. Programmer 클래스 정의
1. class Programmer:
	language = []			# 클래스 변수
	def __init__(self, name):		# 초기화 함수 재정의
		self.name = name		# 인스턴스 변수 선언 및 초기화
	def add_lang(self, lang):		
		self.language.append(lang)	# 클래스 변수 값 변경

2. 여기서 문제!
chris = Programmer('Chris Cho')		# 발표자 이름
chris.add_lang('Python')
chris.add_lang('Java')
print(chris.name) -> 'Chris Cho'
print(chris.language) -> ['Python', 'Java']

ujin = Programmer('Ujin Cho')		# 발표자 아들
print(ujin.name) -> 'Ujin Cho'
print(ujin.language) -> ['Python', 'Java']	# 객체를 통해 접근을 했지만 어쨌든 클래스 변수에 Mutable한 리스트의 값을 변경했기 때문에
					# 나중에 생성된 객체에서도 똑같은 값이 적용됐다.
					# 2개가 동일한 객체를 바라보고 있는 것(메모리 주소가 같다)

3. 이걸 해결하는 방법은
3-1) language = []를 클래스 변수로 선언할게 아니라 인스턴스 변수로 변경한다.
def __init__(self, name):
	self.name = name
	self.language = []

4. 결론
4-1) 클래스 변수
클래스에 의해 생성된 모든 객체가 같은 값을 조회할 때 사용하는 변수
4-2) 인스턴스 변수
인스턴스화 될 때마다 새로운 값이 할당되며 서로 다른 객체 간에는 값을 공유할 수 없는 변수
-> 객체 단위로 값이 따로 관리되는 변수는 반드시 인스턴스 변수 사용

#2. 문제 하나 더
1. class BookReader:
    country = 'South Korea'		# 클래스 변수 선언

    def __init__(self, name):
        self.name = name

    def read_book(self):
        print(self.name, 'is reading in', self.country)

chris = BookReader('Chris Cho')
anna = BookReader('Anna Cho')
chris.read_book()
anna.read_book()
chris.country = 'U.S.A'	# 클래스 변수 값 변경
chris.read_book()		# Chris Cho is reading in U.S.A
anna.read_book()		# chris 인스턴스를 통해 클래스 변수를 변경을
			# 시도했는데, anna의 country가 바뀔까?
			# 답은 No. Anna Cho is reading in South Korea

2. 결론
2-1) 클래스 변수에 변할 수 없는 데이터 타입(예: 문자열)을 쓰는 경우에도
새로 변경한 값을 다른 객체가 공유할 수 없다.
2-2) 왜 그럴까? : 변할 수없는 데이터 타입은 변경을 시도하는 순간 새로운 객체가 생성된다.
이 객체는 변수를 가지고 있는 객체내에서만 접근이 된다. 위 예제의 reader1.country
의 값을 변경한 뒤 reader2.country 값을 확인해 보면 쉽게 이해할 수 있다.
즉, 클래스 변수는 인스턴스화를 하는 시점에 같은 값을 내려받을 때 사용한다고 보면 된다.
하지만 변할 수 있는 데이터 타입을 넣으면 어떻게 될까?

#3. 문제 하나 더
1. 예시
chris.country = 'U.S.A'
BookReader.country = 'Italy'	# 클래스로 클래스 변수에 접근
chris.read_book()			# Chris Cho is reading in U.S.A
anna.read_book()			# Anna Cho is reading in Italy
sean = BookReader('Sean Cho')	# Sean Cho is reading in Italy
sean.read_book()

2. 결론
Immutable 클래스 변수 값을 변경하여 객체가 교체되면, 변경 전에 생성된 객체의 클래스 변수는
낙동강 오리알 신세가 된다.

3. 제대로 작동하기 위해 수정
class SKBookReader:
    _COUNTRY = 'South Korea'	# 내부용 변수 이름은 언더스코어(_)로 시작

    def __init__(self, name):		# 상수는 대문자로 표기
        self.name = name

    def read_book(self):		
        print(self.name, 'is reading in', SKBookReader._COUNTRY) # 클래스 변수 접근은 객체(self)가 아닌, 클래스 이름으로

#4. 다시 정리하기
1. 클래스 변수
클래스에 의해 생성된 모든 객체가 인스턴스화되는 시점에 같은 값을 조회할 때 사용
※ 클래스 변수는 객체 이름이 아닌 클래스 이름으로 접근, 되도록 값이 변경되지 않는 경우에 사용하는 것이 안전

2. 인스턴스 변수
인스턴스화 될 떄마다 새로운 값이 할당되며 서로 다른 객체 간에는 값을 공유할 수 없는 변수
※ 객체 단위로 값을 따로 관리하는 변수는 반드시 인스턴스 변수 사용